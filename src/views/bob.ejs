<div class="bg-gray-900 text-gray-200 min-h-screen flex justify-center px-4">
    <div class="flex flex-col md:flex-row gap-6 w-full max-w-screen-xl">
        <!-- Left Column -->
        <div class="flex-1 bg-gray-800 p-6 rounded-lg">
            <!-- Dropdown -->
            <div class="mb-6">
                <label for="dropdown" class="block text-sm font-medium mb-2">Generation Model</label>
                <select id="dropdown" class="w-full p-3 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring focus:ring-blue-500">
                    <option value="ZP1.5">ZP1.5: Quantizer</option>
                    <option value="ZP2.0">ZP2.0: Quantizer Pro</option>
                    <option value="ZP1.0">ZP1.0: Quantizer Touch</option>
                    <option value="ZP2.0">ZP2.0: Glitch</option>
                    <option value="ZP4.0">ZP4.0: Pixel Art</option>
                </select>
            </div>

            <!-- Help Link -->
            <a href="#" class="text-blue-400 hover:underline block mb-6">How to use in 5 minutes</a>

            <!-- Textarea -->
            <div class="mb-6">
                <label for="prompt" class="block text-sm font-medium mb-2">Prompt</label>
                <textarea id="prompt" placeholder="Describe the image" class="w-full p-3 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring focus:ring-blue-500 h-36 resize-none"></textarea>
            </div>

            <!-- Upload Container -->
            <div class="mb-6">
                <!-- Image Upload Container -->
                <div class="relative w-full flex flex-col items-center justify-center border-2 border-dashed border-gray-600 rounded-lg bg-gray-700 hover:bg-gray-600 transition">
                    <!-- Uploaded Image -->
                    <img
                        id="uploadedImage"
                        src=""
                        alt="Uploaded Image"
                        class="w-full object-contain rounded-lg hidden"
                    />
                    <!-- Placeholder -->
                    <label
                        for="uploadImage"
                        id="uploadPlaceholder"
                        class="flex flex-col items-center justify-center h-60 cursor-pointer"
                    >
                        <span class="text-4xl text-gray-200 mb-2">&#x21E7;</span>
                        <p class="text-gray-400">Upload Input Image</p>
                    </label>
                    <!-- File Input -->
                    <input type="file" id="uploadImage" accept="image/*" class="hidden">
                </div>
            </div>

            <!-- Clear Image Button -->
            <div id="clearImageContainer" class="flex justify-center mt-4 mb-6 hidden">
                <button id="clearImageButton" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-500 transition">
                    Clear Image
                </button>
            </div>

            <!-- Pixel Size Selection -->
            <div class="mb-6">
                <label for="pixelSize" class="block text-sm font-medium mb-2">Choose Pixel Size:</label>
                <select id="pixelSize" class="w-full p-3 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring focus:ring-blue-500">
                    <option value="4">4x4</option>
                    <option value="8">8x8</option>
                    <option value="12">12x12</option>
                    <option value="16">16x16</option>
                    <option value="24">24x24</option>
                    <option value="32">32x32</option>
                </select>
            </div>

            <!-- Generate Button -->
            <button id="generateButton" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition">
                Generate Pixel Art
            </button>
        </div>

        <!-- Right Column -->
        <div class="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4 p-2 border border-gray-700 rounded-lg h-auto md:h-[calc(100vh-2rem)] md:overflow-y-auto scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-gray-800" id="generatedImages">
            <!-- Placeholders -->
            <div class="bg-gray-800 h-60 p-6 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-gray-500 transition">
                <span class="text-gray-400">Generated Image</span>
            </div>
            <div class="bg-gray-800 h-60 p-6 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-gray-500 transition">
                <span class="text-gray-400">Generated Image</span>
            </div>
            <div class="bg-gray-800 h-60 p-6 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-gray-500 transition">
                <span class="text-gray-400">Generated Image</span>
            </div>
        </div>
    </div>
</div>

<script>
    const uploadImageInput = document.getElementById("uploadImage");
    const uploadedImage = document.getElementById("uploadedImage");
    const uploadPlaceholder = document.getElementById("uploadPlaceholder");
    const clearImageContainer = document.getElementById("clearImageContainer");
    const clearImageButton = document.getElementById("clearImageButton");
    const generateButton = document.getElementById("generateButton");
    const pixelSizeSelect = document.getElementById("pixelSize");
    const generatedImages = document.getElementById("generatedImages");

    function saveGeneratedImagesToLocalStorage() {
        const images = [];
        generatedImages.querySelectorAll("img").forEach((img) => {
            images.push(img.src);
        });
        localStorage.setItem("generatedImages", JSON.stringify(images));
    }

    function loadGeneratedImagesFromLocalStorage() {
        const images = JSON.parse(localStorage.getItem("generatedImages")) || [];

        // Clear dynamic content
        generatedImages.querySelectorAll("img").forEach((img) => img.parentElement.remove());

        // Add images from local storage
        images.forEach((src) => {
            const container = createImageContainer(src);
            generatedImages.appendChild(container);
        });

        // Add placeholders if less than 12 items exist
        while (generatedImages.children.length < 12) {
            generatedImages.appendChild(createPlaceholder());
        }
    }
    function addGeneratedImage(imageSrc) {
    const container = createImageContainer(imageSrc);

    // Check for the first placeholder to replace
    const firstPlaceholder = generatedImages.querySelector(".bg-gray-800:not(:has(img))");
    if (firstPlaceholder) {
        // Replace the first placeholder with the new image
        generatedImages.replaceChild(container, firstPlaceholder);
    } else {
        // No placeholders available, prepend the new image to the grid
        generatedImages.insertBefore(container, generatedImages.firstChild);
    }

    // Limit the grid to a maximum of 12 elements
    const items = generatedImages.querySelectorAll(".bg-gray-800");
    while (items.length > 12) {
        generatedImages.removeChild(items[items.length - 1]); // Remove the last item to maintain the limit
    }

    // Update local storage
    const images = JSON.parse(localStorage.getItem("generatedImages")) || [];
    images.unshift(imageSrc); // Add the new image to the start of the array
    if (images.length > 12) {
        images.pop(); // Remove the oldest image from storage
    }
    localStorage.setItem("generatedImages", JSON.stringify(images));
}

    function createImageContainer(src) {
        const container = document.createElement("div");
        container.className = "bg-gray-800 h-60 p-6 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-gray-500 transition";

        const imageElement = document.createElement("img");
        imageElement.src = src;
        imageElement.className = "w-full h-full object-contain";

        container.appendChild(imageElement);
        return container;
    }

    function createPlaceholder() {
        const placeholder = document.createElement("div");
        placeholder.className = "bg-gray-800 h-60 p-6 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-gray-500 transition";
        const span = document.createElement("span");
        span.className = "text-gray-400";
        span.textContent = "Generated Image";
        placeholder.appendChild(span);
        return placeholder;
    }

    window.addEventListener("DOMContentLoaded", loadGeneratedImagesFromLocalStorage);

    uploadImageInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (event) => {
            uploadedImage.src = event.target.result;
            uploadedImage.classList.remove("hidden");
            uploadPlaceholder.classList.add("hidden");
            clearImageContainer.classList.remove("hidden");
        };
        reader.readAsDataURL(file);
    });

    clearImageButton.addEventListener("click", () => {
        uploadedImage.src = "";
        uploadedImage.classList.add("hidden");
        uploadPlaceholder.classList.remove("hidden");
        uploadImageInput.value = "";
        clearImageContainer.classList.add("hidden");
    });

    generateButton.addEventListener("click", () => {
        if (!uploadedImage.src) {
            alert("Please upload an image before generating pixel art!");
            return;
        }

        const pixelSize = parseInt(pixelSizeSelect.value);
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");

        const img = new Image();
        img.onload = () => {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0, img.width, img.height);

            for (let y = 0; y < img.height; y += pixelSize) {
                for (let x = 0; x < img.width; x += pixelSize) {
                    const pixel = ctx.getImageData(x, y, 1, 1).data;
                    ctx.fillStyle = `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]})`;
                    ctx.fillRect(x, y, pixelSize, pixelSize);
                }
            }

            addGeneratedImage(canvas.toDataURL("image/png"));
        };
        img.src = uploadedImage.src;
    });
</script>
